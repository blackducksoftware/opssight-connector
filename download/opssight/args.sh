#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([tag],[t],[Version of OpsSight],[latest])
# ARG_OPTIONAL_BOOLEAN([push],[],[Enable Docker push],[off])
# ARG_OPTIONAL_SINGLE([registry],[r],[Docker registry],[docker.io])
# ARG_OPTIONAL_SINGLE([project],[p],[Docker repository/project],[])
# ARG_OPTIONAL_SINGLE([user],[u],[Docker user id],[])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='trpuh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tag="latest"
_arg_push="off"
_arg_registry="docker.io"
_arg_project=
_arg_user=

print_help ()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-t|--tag <arg>] [--(no-)push] [-r|--registry <arg>] [-p|--project <arg>] [-u|--user <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-t,--tag: Version of OpsSight (default: 'latest')"
	printf '\t%s\n' "--push,--no-push: Enable Docker push (off by default)"
	printf '\t%s\n' "-r,--registry: Docker registry (default: 'docker.io')"
	printf '\t%s\n' "-p,--project: Docker repository/project (no default)"
	printf '\t%s\n' "-u,--user: Docker user id (no default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tag="$2"
				shift
				;;
			--tag=*)
				_arg_tag="${_key##--tag=}"
				;;
			-t*)
				_arg_tag="${_key##-t}"
				;;
			--no-push|--push)
				_arg_push="on"
				test "${1:0:5}" = "--no-" && _arg_push="off"
				;;
			-r|--registry)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_registry="$2"
				shift
				;;
			--registry=*)
				_arg_registry="${_key##--registry=}"
				;;
			-r*)
				_arg_registry="${_key##-r}"
				;;
			-p|--project)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project="$2"
				shift
				;;
			--project=*)
				_arg_project="${_key##--project=}"
				;;
			-p*)
				_arg_project="${_key##-p}"
				;;
			-u|--user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			-u*)
				_arg_user="${_key##-u}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])