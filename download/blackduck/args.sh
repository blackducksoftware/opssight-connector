#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([tag],[t],[Version of Black Duck],[2018.12.2])
# ARG_OPTIONAL_BOOLEAN([binary-scanner],[],[Enable Binary Scanner],[off])
# ARG_OPTIONAL_SINGLE([cfssl],[c],[Version of cfssl],[1.0.0])
# ARG_OPTIONAL_SINGLE([logstash],[l],[Version of logstash],[1.0.2])
# ARG_OPTIONAL_SINGLE([nginx],[n],[Version of nginx],[1.0.0])
# ARG_OPTIONAL_SINGLE([solr],[s],[Version of solr],[1.0.0])
# ARG_OPTIONAL_SINGLE([zookeeper],[z],[Version of zookeeper],[1.0.0])
# ARG_OPTIONAL_SINGLE([binaryscanner],[b],[Version of binary scanner],[1.0.1])
# ARG_OPTIONAL_SINGLE([rabbitmq],[q],[Version of rabbitmq],[1.0.0])
# ARG_OPTIONAL_SINGLE([uploadcache],[e],[Version of upload-cache],[1.0.3])
# ARG_OPTIONAL_BOOLEAN([push],[],[Enable Docker push],[off])
# ARG_OPTIONAL_SINGLE([registry],[r],[Docker registry],[docker.io])
# ARG_OPTIONAL_SINGLE([project],[p],[Docker repository/project],[])
# ARG_OPTIONAL_SINGLE([user],[u],[Docker user id],[])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='tclnszbqerpuh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tag="2018.12.2"
_arg_binary_scanner="off"
_arg_cfssl="1.0.0"
_arg_logstash="1.0.2"
_arg_nginx="1.0.0"
_arg_solr="1.0.0"
_arg_zookeeper="1.0.0"
_arg_binaryscanner="1.0.1"
_arg_rabbitmq="1.0.0"
_arg_uploadcache="1.0.3"
_arg_push="off"
_arg_registry="docker.io"
_arg_project=
_arg_user=

print_help ()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-t|--tag <arg>] [--(no-)binary-scanner] [-c|--cfssl <arg>] [-l|--logstash <arg>] [-n|--nginx <arg>] [-s|--solr <arg>] [-z|--zookeeper <arg>] [-b|--binaryscanner <arg>] [-q|--rabbitmq <arg>] [-e|--uploadcache <arg>] [--(no-)push] [-r|--registry <arg>] [-p|--project <arg>] [-u|--user <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-t,--tag: Version of Black Duck (default: '2018.12.2')"
	printf '\t%s\n' "--binary-scanner,--no-binary-scanner: Enable Binary Scanner (off by default)"
	printf '\t%s\n' "-c,--cfssl: Version of cfssl (default: '1.0.0')"
	printf '\t%s\n' "-l,--logstash: Version of logstash (default: '1.0.2')"
	printf '\t%s\n' "-n,--nginx: Version of nginx (default: '1.0.0')"
	printf '\t%s\n' "-s,--solr: Version of solr (default: '1.0.0')"
	printf '\t%s\n' "-z,--zookeeper: Version of zookeeper (default: '1.0.0')"
	printf '\t%s\n' "-b,--binaryscanner: Version of binary scanner (default: '1.0.1')"
	printf '\t%s\n' "-q,--rabbitmq: Version of rabbitmq (default: '1.0.0')"
	printf '\t%s\n' "-e,--uploadcache: Version of upload-cache (default: '1.0.3')"
	printf '\t%s\n' "--push,--no-push: Enable Docker push (off by default)"
	printf '\t%s\n' "-r,--registry: Docker registry (default: 'docker.io')"
	printf '\t%s\n' "-p,--project: Docker repository/project (no default)"
	printf '\t%s\n' "-u,--user: Docker user id (no default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tag="$2"
				shift
				;;
			--tag=*)
				_arg_tag="${_key##--tag=}"
				;;
			-t*)
				_arg_tag="${_key##-t}"
				;;
			--no-binary-scanner|--binary-scanner)
				_arg_binary_scanner="on"
				test "${1:0:5}" = "--no-" && _arg_binary_scanner="off"
				;;
			-c|--cfssl)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cfssl="$2"
				shift
				;;
			--cfssl=*)
				_arg_cfssl="${_key##--cfssl=}"
				;;
			-c*)
				_arg_cfssl="${_key##-c}"
				;;
			-l|--logstash)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_logstash="$2"
				shift
				;;
			--logstash=*)
				_arg_logstash="${_key##--logstash=}"
				;;
			-l*)
				_arg_logstash="${_key##-l}"
				;;
			-n|--nginx)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_nginx="$2"
				shift
				;;
			--nginx=*)
				_arg_nginx="${_key##--nginx=}"
				;;
			-n*)
				_arg_nginx="${_key##-n}"
				;;
			-s|--solr)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_solr="$2"
				shift
				;;
			--solr=*)
				_arg_solr="${_key##--solr=}"
				;;
			-s*)
				_arg_solr="${_key##-s}"
				;;
			-z|--zookeeper)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zookeeper="$2"
				shift
				;;
			--zookeeper=*)
				_arg_zookeeper="${_key##--zookeeper=}"
				;;
			-z*)
				_arg_zookeeper="${_key##-z}"
				;;
			-b|--binaryscanner)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_binaryscanner="$2"
				shift
				;;
			--binaryscanner=*)
				_arg_binaryscanner="${_key##--binaryscanner=}"
				;;
			-b*)
				_arg_binaryscanner="${_key##-b}"
				;;
			-q|--rabbitmq)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_rabbitmq="$2"
				shift
				;;
			--rabbitmq=*)
				_arg_rabbitmq="${_key##--rabbitmq=}"
				;;
			-q*)
				_arg_rabbitmq="${_key##-q}"
				;;
			-e|--uploadcache)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_uploadcache="$2"
				shift
				;;
			--uploadcache=*)
				_arg_uploadcache="${_key##--uploadcache=}"
				;;
			-e*)
				_arg_uploadcache="${_key##-e}"
				;;
			--no-push|--push)
				_arg_push="on"
				test "${1:0:5}" = "--no-" && _arg_push="off"
				;;
			-r|--registry)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_registry="$2"
				shift
				;;
			--registry=*)
				_arg_registry="${_key##--registry=}"
				;;
			-r*)
				_arg_registry="${_key##-r}"
				;;
			-p|--project)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project="$2"
				shift
				;;
			--project=*)
				_arg_project="${_key##--project=}"
				;;
			-p*)
				_arg_project="${_key##-p}"
				;;
			-u|--user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			-u*)
				_arg_user="${_key##-u}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])