#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([namespace],[n],[namespace where OpsSight to be installed],[blackduck-opssight])
# ARG_OPTIONAL_SINGLE([version],[v],[version of OpsSight to be installed],[latest])
# ARG_OPTIONAL_SINGLE([docker-config],[d],[file path to Docker configuration to create the image pull secret],[])
# ARG_OPTIONAL_SINGLE([registry],[r],[Docker registry],[registry.connect.redhat.com])
# ARG_OPTIONAL_SINGLE([project],[p],[Docker project/repository],[blackducksoftware])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='nvdrph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_namespace="blackduck-opssight"
_arg_version="latest"
_arg_docker_config=
_arg_registry="registry.connect.redhat.com"
_arg_project="blackducksoftware"

print_help ()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-n|--namespace <arg>] [-v|--version <arg>] [-d|--docker-config <arg>] [-r|--registry <arg>] [-p|--project <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-n,--namespace: namespace where OpsSight to be installed (default: 'blackduck-opssight')"
	printf '\t%s\n' "-v,--version: version of OpsSight to be installed (default: 'latest')"
	printf '\t%s\n' "-d,--docker-config: file path to Docker configuration to create the image pull secret (no default)"
	printf '\t%s\n' "-r,--registry: Docker registry (default: 'registry.connect.redhat.com')"
	printf '\t%s\n' "-p,--project: Docker project/repository (default: 'blackducksoftware')"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-n|--namespace)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_namespace="$2"
				shift
				;;
			--namespace=*)
				_arg_namespace="${_key##--namespace=}"
				;;
			-n*)
				_arg_namespace="${_key##-n}"
				;;
			-v|--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			-v*)
				_arg_version="${_key##-v}"
				;;
			-d|--docker-config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_docker_config="$2"
				shift
				;;
			--docker-config=*)
				_arg_docker_config="${_key##--docker-config=}"
				;;
			-d*)
				_arg_docker_config="${_key##-d}"
				;;
			-r|--registry)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_registry="$2"
				shift
				;;
			--registry=*)
				_arg_registry="${_key##--registry=}"
				;;
			-r*)
				_arg_registry="${_key##-r}"
				;;
			-p|--project)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project="$2"
				shift
				;;
			--project=*)
				_arg_project="${_key##--project=}"
				;;
			-p*)
				_arg_project="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])