# This is an example of a container that can be used as a drop-in replacement
# for the standard postgres container that ships with the hub.
# In order to use it:

# First, run oc create -f db.yml.
# Note that the createuser statement might not be necessary, or it might fail.
# # Example of how to configure an external database, such as this one:
# oc create -f db-example.yml # create the database, expose it through a port.
# podname=`oc get pods | grep postgres | cut -d' ' -f 1'` # access the database
# # schema setup (1 and 2)
# oc cp $podname external-postgres-init.pgsql /tmp/init.sql
# oc exec -t -i $podname psql -a -f /tmp/init-db.sql ;
# # And finally, setup users on the databbase, i.e.

# oc create secret generic db-creds --from-literal=blackduck=my-pwd1 --from-literal=blackduck_user=my-pwd2
# oc exec -t -i $podname psql -c "ALTER USER blackduck WITH password 'my-pwd1' ;"
# oc exec -t -i $podname psql -c "ALTER USER blackduck_user WITH password 'my-pwd2' ;"

# Then, youre postgres container is ready to go and you can start the hub app.

apiVersion: v1
kind: List
metadata:
  name: hub
items:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: hub-db-config-granular
  data:
    HUB_POSTGRES_ENABLE_SSL: "false"
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: postgres
  spec:
    replicas: 1
    template:
      metadata:
        name: postgres
        labels:
          app: postgres
          tier: postgres
      spec:
        volumes:
        - name: postgres-persistent-vol
          emptyDir: {}
#        In some filesystems, red hat's postgres user (26) won't by default be able to write to directories.
#        This is a declarative way to fix this (will work iff you're allowed to run containers as uid 0).
#        initContainers:
#        - name: chmod
#        command: ["chown", "-R", "26:26", "/var/lib/pgsql/data/" ]
#        image: alpine
#        volumeMounts:
#        - name: postgres-persistent-vol
#          mountPath: /var/lib/pgsql/data
#          subPath: blackduck
#          readOnly: false
#        securityContext:
#          runAsUser: 0
        containers:
        - name: postgres
          image: registry.access.redhat.com/rhscl/postgresql-96-rhel7:1
          resources:
            requests:
              memory: 12G
              cpu: 2
          volumeMounts:
          - name: postgres-persistent-vol
            mountPath: /var/lib/pgsql/data
          envFrom:
          - configMapRef:
              name: hub-db-config
          - configMapRef:
              name: hub-db-config-granular
          env:
          - name: POSTGRESQL_USER
            value: blackduck
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-creds
                key: blackduck_user
          - name: POSTGRESQL_DATABASE
            value: blackduck
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-creds
                key: blackduck
          ports:
          - containerPort: 5432
- apiVersion: v1
  kind: Service
  metadata:
    name: postgres
  spec:
    ports:
    - name: 5432-tcp
      port: 5432
      targetPort: 5432
    selector:
      app: postgres
  status:
    loadBalancer: {}
