/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/blackducksoftware/perceptor-protoform/pkg/api/hub/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HubLister helps list Hubs.
type HubLister interface {
	// List lists all Hubs in the indexer.
	List(selector labels.Selector) (ret []*v1.Hub, err error)
	// Hubs returns an object that can list and get Hubs.
	Hubs(namespace string) HubNamespaceLister
	HubListerExpansion
}

// hubLister implements the HubLister interface.
type hubLister struct {
	indexer cache.Indexer
}

// NewHubLister returns a new HubLister.
func NewHubLister(indexer cache.Indexer) HubLister {
	return &hubLister{indexer: indexer}
}

// List lists all Hubs in the indexer.
func (s *hubLister) List(selector labels.Selector) (ret []*v1.Hub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Hub))
	})
	return ret, err
}

// Hubs returns an object that can list and get Hubs.
func (s *hubLister) Hubs(namespace string) HubNamespaceLister {
	return hubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HubNamespaceLister helps list and get Hubs.
type HubNamespaceLister interface {
	// List lists all Hubs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Hub, err error)
	// Get retrieves the Hub from the indexer for a given namespace and name.
	Get(name string) (*v1.Hub, error)
	HubNamespaceListerExpansion
}

// hubNamespaceLister implements the HubNamespaceLister
// interface.
type hubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hubs in the indexer for a given namespace.
func (s hubNamespaceLister) List(selector labels.Selector) (ret []*v1.Hub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Hub))
	})
	return ret, err
}

// Get retrieves the Hub from the indexer for a given namespace and name.
func (s hubNamespaceLister) Get(name string) (*v1.Hub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hub"), name)
	}
	return obj.(*v1.Hub), nil
}
