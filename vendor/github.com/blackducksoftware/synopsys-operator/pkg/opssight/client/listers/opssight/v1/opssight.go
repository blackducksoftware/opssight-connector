/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/blackducksoftware/synopsys-operator/pkg/api/opssight/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpsSightLister helps list OpsSights.
type OpsSightLister interface {
	// List lists all OpsSights in the indexer.
	List(selector labels.Selector) (ret []*v1.OpsSight, err error)
	// OpsSights returns an object that can list and get OpsSights.
	OpsSights(namespace string) OpsSightNamespaceLister
	OpsSightListerExpansion
}

// opsSightLister implements the OpsSightLister interface.
type opsSightLister struct {
	indexer cache.Indexer
}

// NewOpsSightLister returns a new OpsSightLister.
func NewOpsSightLister(indexer cache.Indexer) OpsSightLister {
	return &opsSightLister{indexer: indexer}
}

// List lists all OpsSights in the indexer.
func (s *opsSightLister) List(selector labels.Selector) (ret []*v1.OpsSight, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpsSight))
	})
	return ret, err
}

// OpsSights returns an object that can list and get OpsSights.
func (s *opsSightLister) OpsSights(namespace string) OpsSightNamespaceLister {
	return opsSightNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpsSightNamespaceLister helps list and get OpsSights.
type OpsSightNamespaceLister interface {
	// List lists all OpsSights in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.OpsSight, err error)
	// Get retrieves the OpsSight from the indexer for a given namespace and name.
	Get(name string) (*v1.OpsSight, error)
	OpsSightNamespaceListerExpansion
}

// opsSightNamespaceLister implements the OpsSightNamespaceLister
// interface.
type opsSightNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpsSights in the indexer for a given namespace.
func (s opsSightNamespaceLister) List(selector labels.Selector) (ret []*v1.OpsSight, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpsSight))
	})
	return ret, err
}

// Get retrieves the OpsSight from the indexer for a given namespace and name.
func (s opsSightNamespaceLister) Get(name string) (*v1.OpsSight, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("opssight"), name)
	}
	return obj.(*v1.OpsSight), nil
}
